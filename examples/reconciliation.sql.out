-- This file contains the sql queries plus their output, but we set the filetype to sql for better syntax highlighting
-- vim: set filetype=sql:

-- This is a fully working example script that shows reconcilation strategies.
--
-- Note that it uses `\gset` to store sql responses as variables. For example,
-- `\gset foo_` creates variables for each column in the response like
-- `foo_col1`, `foo_col2`, etc. These variables can then be used like
-- `:'foo1_col`.
-- The entire script can be passed to psql. If you are running postgres via the
-- pgledger docker compose, you can run this script with:
--
--   cat reconciliation.sql | \
--     docker compose exec --no-TTY postgres psql -U pgledger --echo-queries --no-psqlrc
--
-- The goal of this script is to show some reconcilation examples. Reconcilation is the process
-- by which we check that our view of the world matches what we expect.
-- Let's start with a simple payment flow example, similar to the basic-example.sql script:
SELECT id FROM pgledger_create_account('user1.external', 'USD') \gset user1_external_
SELECT id FROM pgledger_create_account('user1.receivables', 'USD') \gset user1_receivables_
SELECT id FROM pgledger_create_account('user1.available', 'USD') \gset user1_available_
SELECT id FROM pgledger_create_account('user1.pending_outbound', 'USD') \gset user1_pending_outbound_
-- The first step in the flow is the user initiates a $50 payment, and we are
-- waiting for funds to arrive. The difference this time is we'll use some
-- metadata to help us track what's going on:
SELECT * FROM pgledger_create_transfer(
    :'user1_external_id',
    :'user1_receivables_id',
    50.00,
    metadata => '{"payment_id": "p_123"}'
);
               id                |         from_account_id         |          to_account_id          | amount |          created_at           |           event_at            |        metadata         
---------------------------------+---------------------------------+---------------------------------+--------+-------------------------------+-------------------------------+-------------------------
 pglt_01K8KZNDE3F6VTM7QC0GMV44X8 | pgla_01K8KZNDE0FTGVETJKZAHX5T9G | pgla_01K8KZNDE1FFP87KA289FXRSEN |  50.00 | 2025-10-27 23:22:13.314654+00 | 2025-10-27 23:22:13.314654+00 | {"payment_id": "p_123"}
(1 row)

-- The user also creates another $50 payment:
SELECT * FROM pgledger_create_transfer(
    :'user1_external_id',
    :'user1_receivables_id',
    50.00,
    metadata => '{"payment_id": "p_456"}'
);
               id                |         from_account_id         |          to_account_id          | amount |          created_at           |           event_at            |        metadata         
---------------------------------+---------------------------------+---------------------------------+--------+-------------------------------+-------------------------------+-------------------------
 pglt_01K8KZNDE4FBMT625FF7P4AFWD | pgla_01K8KZNDE0FTGVETJKZAHX5T9G | pgla_01K8KZNDE1FFP87KA289FXRSEN |  50.00 | 2025-10-27 23:22:13.316456+00 | 2025-10-27 23:22:13.316456+00 | {"payment_id": "p_456"}
(1 row)

-- Next, the funds arrive in our account for one of the payments, so we remove
-- them from receivables and make them available:
SELECT * FROM pgledger_create_transfer(
    :'user1_receivables_id',
    :'user1_available_id',
    50.00,
    metadata => '{"payment_id": "p_456"}'
);
               id                |         from_account_id         |          to_account_id          | amount |          created_at           |           event_at            |        metadata         
---------------------------------+---------------------------------+---------------------------------+--------+-------------------------------+-------------------------------+-------------------------
 pglt_01K8KZNDE5EP88JXDPV1TVX34T | pgla_01K8KZNDE1FFP87KA289FXRSEN | pgla_01K8KZNDE2E3WREDDG5HMKDFT3 |  50.00 | 2025-10-27 23:22:13.317159+00 | 2025-10-27 23:22:13.317159+00 | {"payment_id": "p_456"}
(1 row)

-- Now, we can query the receivables account and see that the balance is still
-- $50, meaning we are waiting on more funds to arrive:
SELECT balance FROM pgledger_accounts_view
WHERE id =:'user1_receivables_id';
 balance 
---------
   50.00
(1 row)

-- But how do we know which payment we're still waiting for? If we use metadata
-- on each transfer which ties it to a payment_id, then we can do interesting
-- rollups, such as summing entries by payment_id. Any payment we've received
-- funds for will zero out (since the incoming $50 and outgoing -$50 sum to 0):
SELECT
    metadata ->> 'payment_id' AS payment_id,
    sum(amount) AS sum
FROM pgledger_entries_view
WHERE account_id =:'user1_receivables_id'
GROUP BY 1;
 payment_id |  sum  
------------+-------
 p_123      | 50.00
 p_456      |  0.00
(2 rows)

-- This strategy can help us find other issues, such as when the amount of
-- funds we received weren't what we expectd. For example, say we eventually
-- received the funds for the first payment but it was short:
SELECT * FROM pgledger_create_transfer(
    :'user1_receivables_id',
    :'user1_available_id',
    49.50,
    metadata => '{"payment_id": "p_123"}'
);
               id                |         from_account_id         |          to_account_id          | amount |          created_at           |           event_at            |        metadata         
---------------------------------+---------------------------------+---------------------------------+--------+-------------------------------+-------------------------------+-------------------------
 pglt_01K8KZNDE6FBPRGK0EEE8ZG78X | pgla_01K8KZNDE1FFP87KA289FXRSEN | pgla_01K8KZNDE2E3WREDDG5HMKDFT3 |  49.50 | 2025-10-27 23:22:13.318509+00 | 2025-10-27 23:22:13.318509+00 | {"payment_id": "p_123"}
(1 row)

-- Now, this discrepency will show up in the rollup, and it will tell us how much it's off by:
SELECT
    metadata ->> 'payment_id' AS payment_id,
    sum(amount) AS sum
FROM pgledger_entries_view
WHERE account_id =:'user1_receivables_id'
GROUP BY 1
HAVING sum(amount) != 0;
 payment_id | sum  
------------+------
 p_123      | 0.50
(1 row)

-- Continuing the example, let's issue a partial refund of the payment. When we
-- issue the refund, we move the money into the pending_outbound account to
-- hold it until we get confirmation that it was sent
SELECT * FROM pgledger_create_transfer(
    :'user1_available_id',
    :'user1_pending_outbound_id',
    20.00,
    metadata => '{"payment_id": "p_123"}'
);
               id                |         from_account_id         |          to_account_id          | amount |          created_at           |           event_at            |        metadata         
---------------------------------+---------------------------------+---------------------------------+--------+-------------------------------+-------------------------------+-------------------------
 pglt_01K8KZNDE7FEY9SV4KSZZ14TFJ | pgla_01K8KZNDE2E3WREDDG5HMKDFT3 | pgla_01K8KZNDE2EPJS13EK23NY30NB |  20.00 | 2025-10-27 23:22:13.319583+00 | 2025-10-27 23:22:13.319583+00 | {"payment_id": "p_123"}
(1 row)

-- Once we get confirmation that that refund was sent, We can move the money
-- back to the user's external account (e.g. their credit/debit card). The
-- metadata can be whatever JSON we want, so we can include as many fields as
-- will be helpful:
SELECT * FROM pgledger_create_transfer(
    :'user1_pending_outbound_id',
    :'user1_external_id',
    20.00,
    event_at => '2025-07-21T12:45:54.123Z',
    metadata => '{"payment_id": "p_123",
        "webhook_id": "webhook_123"}'
);
               id                |         from_account_id         |          to_account_id          | amount |          created_at           |          event_at          |                       metadata                       
---------------------------------+---------------------------------+---------------------------------+--------+-------------------------------+----------------------------+------------------------------------------------------
 pglt_01K8KZNDE8EWCBEZZW8SS6NM1D | pgla_01K8KZNDE2EPJS13EK23NY30NB | pgla_01K8KZNDE0FTGVETJKZAHX5T9G |  20.00 | 2025-10-27 23:22:13.320311+00 | 2025-07-21 12:45:54.123+00 | {"payment_id": "p_123", "webhook_id": "webhook_123"}
(1 row)

-- Metadata gives us a powerful way to query the ledger, For example, we can
-- track the history of a specific payment through the various accounts which
-- can help us understand the state of a payment or account:
SELECT
    e.transfer_id,
    a.name,
    e.amount
FROM pgledger_entries_view e
INNER JOIN pgledger_accounts_view a ON e.account_id = a.id
WHERE e.metadata ->> 'payment_id' = 'p_123'
ORDER BY 1;
           transfer_id           |          name          | amount 
---------------------------------+------------------------+--------
 pglt_01K8KZNDE3F6VTM7QC0GMV44X8 | user1.external         | -50.00
 pglt_01K8KZNDE3F6VTM7QC0GMV44X8 | user1.receivables      |  50.00
 pglt_01K8KZNDE6FBPRGK0EEE8ZG78X | user1.receivables      | -49.50
 pglt_01K8KZNDE6FBPRGK0EEE8ZG78X | user1.available        |  49.50
 pglt_01K8KZNDE7FEY9SV4KSZZ14TFJ | user1.available        | -20.00
 pglt_01K8KZNDE7FEY9SV4KSZZ14TFJ | user1.pending_outbound |  20.00
 pglt_01K8KZNDE8EWCBEZZW8SS6NM1D | user1.pending_outbound | -20.00
 pglt_01K8KZNDE8EWCBEZZW8SS6NM1D | user1.external         |  20.00
(8 rows)

-- And then we can visualize that data in various ways. For example, we can
-- take the previous query and display in a column-oriented view, making it
-- really easy to see the flow of money:
SELECT
    e.transfer_id,
    a.name,
    e.amount
FROM pgledger_entries_view e
INNER JOIN pgledger_accounts_view a ON e.account_id = a.id
WHERE e.metadata ->> 'payment_id' = 'p_123'
ORDER BY 1
\crosstabview transfer_id name amount
           transfer_id           | user1.external | user1.receivables | user1.available | user1.pending_outbound 
---------------------------------+----------------+-------------------+-----------------+------------------------
 pglt_01K8KZNDE3F6VTM7QC0GMV44X8 |         -50.00 |             50.00 |                 |                       
 pglt_01K8KZNDE6FBPRGK0EEE8ZG78X |                |            -49.50 |           49.50 |                       
 pglt_01K8KZNDE7FEY9SV4KSZZ14TFJ |                |                   |          -20.00 |                  20.00
 pglt_01K8KZNDE8EWCBEZZW8SS6NM1D |          20.00 |                   |                 |                 -20.00
(4 rows)

